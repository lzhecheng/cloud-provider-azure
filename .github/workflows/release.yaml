name: Release

on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read

jobs:
  build-cloud-controller-manager:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Go version
        run: echo "GO_VERSION=$(grep -Eo '^go ([0-9]+\.[0-9]+)$' go.mod | cut -d ' ' -f 2)" >> $GITHUB_ENV
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build binary
        run: |
          rm -rf ./bin
          ARCH=${{ matrix.arch }} make bin/azure-cloud-controller-manager
          mv bin/azure-cloud-controller-manager bin/azure-cloud-controller-manager-${{ matrix.os }}-${{ matrix.arch }}
      - uses: actions/upload-artifact@v2
        with:
          name: cloud-controller-manager-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/azure-cloud-controller-manager-${{ matrix.os }}-${{ matrix.arch }}
          if-no-files-found: error

  build-cloud-node-manager:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Go version
        run: echo "GO_VERSION=$(grep -Eo '^go ([0-9]+\.[0-9]+)$' go.mod | cut -d ' ' -f 2)" >> $GITHUB_ENV
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build binary for linux
        if: matrix.os == 'linux'
        run: |
          rm -rf ./bin
          ARCH=${{ matrix.arch }} make bin/azure-cloud-node-manager
          mv bin/azure-cloud-node-manager bin/azure-cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}
      - name: Build binary for windows
        if: matrix.os == 'windows'
        run: |
          rm -rf ./bin
          ARCH=${{ matrix.arch }} make bin/azure-cloud-node-manager.exe
          mv bin/azure-cloud-node-manager-${{ matrix.arch }}.exe bin/azure-cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}.exe
      - name: Upload artifact for linux
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/azure-cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}
      - name: Upload artifact for windows
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/azure-cloud-node-manager-${{ matrix.os }}-${{ matrix.arch }}.exe
          if-no-files-found: error

  build-acr-credential-provider:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm
          - os: linux
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get Go version
        run: echo "GO_VERSION=$(grep -Eo '^go ([0-9]+\.[0-9]+)$' go.mod | cut -d ' ' -f 2)" >> $GITHUB_ENV
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - name: Build binary for linux
        if: matrix.os == 'linux'
        run: |
          rm -rf ./bin
          ARCH=${{ matrix.arch }} make bin/azure-acr-credential-provider
          mv bin/azure-acr-credential-provider bin/azure-acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}
      - name: Build binary for windows
        if: matrix.os == 'windows'
        run: |
          rm -rf ./bin
          ARCH=${{ matrix.arch }} make bin/azure-acr-credential-provider.exe
          mv bin/azure-acr-credential-provider.exe bin/azure-acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}.exe
      - name: Upload artifact for linux
        if: matrix.os == 'linux'
        uses: actions/upload-artifact@v2
        with:
          name: acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/azure-acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}
      - name: Upload artifact for windows
        if: matrix.os == 'windows'
        uses: actions/upload-artifact@v2
        with:
          name: acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}
          path: bin/azure-acr-credential-provider-${{ matrix.os }}-${{ matrix.arch }}.exe
          if-no-files-found: error

  publish:
    runs-on: ubuntu-latest
    needs:
      - build-cloud-controller-manager
      - build-cloud-node-manager
      - build-acr-credential-provider
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup Golang
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
      - name: Generate release note
        env:
          GITHUB_TOKEN: ${{ github.token }}
        run: |
          VERSION="${GITHUB_REF_NAME#[vV]}"
          VERSION_MAJOR="${VERSION%%\.*}"
          VERSION_MINOR="${VERSION#*.}"
          VERSION_MINOR="${VERSION_MINOR%.*}"
          VERSION_PATCH="${VERSION##*.}"

          BRANCH=release-${VERSION_MAJOR}.${VERSION_MINOR}
          if [[ ! `git show-ref ${BRANCH}` ]]; then
            BRANCH=master
          fi

          if [[ "${VERSION_PATCH}" = "0" ]]; then
            START_TAG=remotes/origin/release-${VERSION_MAJOR}.$((VERSION_MINOR-1))
          else
            START_TAG=v${VERSION_MAJOR}.${VERSION_MINOR}.$((VERSION_PATCH-1))
          fi
          START_SHA=$(git rev-parse ${START_TAG}) 
          END_TAG=${GITHUB_REF_NAME}
          END_SHA=$(git rev-parse ${END_TAG})

          echo "BRANCH=${BRANCH}"
          echo "START_TAG=${START_TAG} START_SHA=${START_SHA}"
          echo "END_TAG=${END_TAG} END_SHA=${END_SHA}"

          GO111MODULE=on go install k8s.io/release/cmd/release-notes@latest
          release-notes --repo=cloud-provider-azure \
          	--org=kubernetes-sigs \
          	--branch=${BRANCH} \
          	--start-sha=${START_SHA} \
          	--end-sha=${END_SHA} \
          	--output=release-note.md
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: ./artifacts
      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          body_path: release-note.md
          files: |
            ./artifacts/cloud-node-manager-*-*/*
            ./artifacts/cloud-controller-manager-*-*/*
            ./artifacts/acr-credential-provider-*-*/*
